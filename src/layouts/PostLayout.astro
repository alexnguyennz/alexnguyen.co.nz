---
import { type CollectionEntry } from "astro:content";
import { type MarkdownHeading } from "astro";

import Layout from "./Layout.astro";
import TableOfContents from "@/components/pages/blog/TableOfContents.astro";

import { Fade } from "@/components/Fade";

interface Props {
  frontmatter: CollectionEntry<"posts">["data"];
  headings: MarkdownHeading[];
  tags?: CollectionEntry<"tags">[];
}

const { frontmatter, headings, tags } = Astro.props;
---

<Layout title={`${frontmatter.title} - `}>
  <Fragment slot="head">
    <slot name="head" />
  </Fragment>

  <Fade client:visible><h1>{frontmatter.title}</h1></Fade>

  <Fade client:visible delay={0.25}>
    <p class="mb-2 text-center text-sm">
      {
        frontmatter.lastUpdated
          ? `Last updated ${new Date(
              frontmatter.lastUpdated,
            ).toLocaleDateString("en-NZ", {
              year: "numeric",
              month: "long",
              day: "numeric",
            })}`
          : `${new Date(frontmatter.date).toLocaleDateString("en-NZ", {
              year: "numeric",
              month: "long",
              day: "numeric",
            })}`
      }
    </p>
    <div class="flex items-center justify-center gap-1.5">
      {
        tags &&
          tags.map(({ slug, data: tag }) => (
            <a href={`/tags/${slug}`}>
              <span class="rounded-3xl bg-slate-800 px-2 py-1 text-xs text-white">
                {tag.name}
              </span>
            </a>
          ))
      }
    </div>
    <div class="mt-4">
      <div class="flex flex-col lg:flex-row lg:items-start">
        <article class="post prose dark:prose-invert sm:max-w-prose">
          <slot />
        </article>

        <TableOfContents headings={headings} />
      </div>
    </div>
  </Fade>
</Layout>

<script>
  const clipboardIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-copy"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"/><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/></svg>`;

  const codeBlocks = Array.from(document.querySelectorAll("pre"));

  for (const codeBlock of codeBlocks) {
    const wrapper = document.createElement("div");
    wrapper.style.position = "relative";

    const copyButton = document.createElement("button");
    copyButton.innerHTML = clipboardIcon;
    copyButton.className = "copy-button";
    copyButton.type = "button";
    copyButton.ariaLabel = "copy code";

    codeBlock.setAttribute("tabindex", "0");
    codeBlock.appendChild(copyButton);

    if (codeBlock.parentNode) {
      codeBlock.parentNode.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", () =>
        copyCode(codeBlock, copyButton),
      );
    }
  }

  async function copyCode(block: HTMLPreElement, button: HTMLButtonElement) {
    const code = block.querySelector("code");

    if (code) await navigator.clipboard.writeText(code.innerText);
    button.innerHTML = "Copied";

    setTimeout(() => (button.innerHTML = clipboardIcon), 1500);
  }
</script>
