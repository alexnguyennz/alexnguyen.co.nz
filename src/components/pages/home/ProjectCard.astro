---
import { getEntries, type CollectionEntry } from "astro:content";

import { Image } from "astro:assets";
import { Icon } from "astro-icon";
import { cn } from "../../../lib/utils";

interface Props {
  project: CollectionEntry<"projects">;
}

const { project } = Astro.props;

const tags = await getEntries(project.data.tags);
---

<article
  class="group relative flex h-full max-w-xs flex-1 flex-col rounded-[3rem] bg-white p-5 transition duration-300 hover:translate-y-1 dark:bg-cyan-50 dark:text-cyan-900"
>
  <div
    class="absolute right-4 top-4 flex gap-2 transition group-hover:opacity-100 sm:opacity-0"
  >
    <a
      href={project.data.url}
      target="_blank"
      rel="noopener noreferrer nofollow"
      title="View"
      class="p-2 text-2xl no-underline hover:no-underline"
      aria-label={project.data.name + " link"}
    >
      â†—
    </a>
  </div>

  <div>
    <a href={`/project/${project.slug}`} data-astro-prefetch
      ><Image
        src={project.data.cover}
        height={192}
        alt={project.data.name}
        class="mx-auto mb-2 h-[128px] object-contain"
        loading="lazy"
      /></a
    >

    <div class="mt-auto">
      <h2>
        <a href={`/project/${project.slug}`} data-astro-prefetch>
          {project.data.name}
        </a>
      </h2>

      <div class="flex flex-col items-center gap-4">
        <h3 class="text-sm">{project.data.description}</h3>

        <div class="relative flex items-center justify-center gap-4">
          {
            tags.map(({ slug, data: tag }) => (
              <a
                href={tag.url}
                target="_blank"
                rel="noreferrer noopener nofollow"
                title={tag.name}
                aria-label={tag.name}
              >
                <Icon
                  name={slug}
                  class={cn(
                    "w-auto fill-[#034AD8]",
                    tag.name === "Nuxt" ? "h-8" : "h-6",
                  )}
                />
              </a>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</article>

<style>
  article {
    --color: #41b011;
    --radius: 0%;
    --elevation: 0px;
    --bevel: 2px;
    --angle: 216deg;
    --intensity: 42;
    --diffusion: 0;
    --sin: calc(sin(var(--angle)));
    --cos: calc(cos(var(--angle)));
    --x-displacement: calc(-1 * var(--cos) * (var(--elevation) + 1px));
    --y-displacement: calc(-1 * var(--sin) * (var(--elevation) + 1px));
    --edge-opacity: calc(var(--intensity) * 0.006 - var(--diffusion) * 0.002);
    --edge-blur: calc(var(--bevel) * 1.5);
    --surface-contrast: calc(
      var(--intensity) * 0.01 - var(--diffusion) * 0.005
    );
    box-shadow:
      var(--x-displacement) var(--y-displacement)
        calc(var(--diffusion) * 0.3px + (var(--elevation)))
        calc(var(--elevation) / 2) rgba(0, 0, 0, calc(var(--intensity) * 0.006)),
      0px 0px calc(var(--diffusion) * 1.4px)
        rgba(255, 255, 255, calc(var(--intensity) * 0.004)),
      inset calc(var(--bevel) * -1) 0 var(--edge-blur)
        hsla(100, 0%, calc((var(--cos) + 1) * 50%), var(--edge-opacity)),
      inset 0 var(--bevel) var(--edge-blur)
        hsla(100, 0%, calc((-1 * var(--sin) + 1) * 50%), var(--edge-opacity)),
      inset var(--bevel) 0 var(--edge-blur)
        hsla(100, 0%, calc((-1 * var(--cos) + 1) * 50%), var(--edge-opacity)),
      inset 0 calc(var(--bevel) * -1) var(--edge-blur)
        hsla(100, 0%, calc((var(--sin) + 1) * 50%), var(--edge-opacity));
    background-blend-mode: soft-light;
  }

  article:hover {
    --color: #41b011;
    --radius: 0%;
    --elevation: 2px;
    --bevel: 1px;
    --angle: 270deg;
    --intensity: 42;
    --diffusion: 0;
    --sin: calc(sin(var(--angle)));
    --cos: calc(cos(var(--angle)));
    --x-displacement: calc(-1 * var(--cos) * (var(--elevation) + 1px));
    --y-displacement: calc(-1 * var(--sin) * (var(--elevation) + 1px));
    --edge-opacity: calc(var(--intensity) * 0.006 - var(--diffusion) * 0.002);
    --edge-blur: calc(var(--bevel) * 1.5);
    --surface-contrast: calc(
      var(--intensity) * 0.01 - var(--diffusion) * 0.005
    );
    box-shadow:
      var(--x-displacement) var(--y-displacement)
        calc(var(--diffusion) * 0.3px + (var(--elevation)))
        calc(var(--elevation) / 2) rgba(0, 0, 0, calc(var(--intensity) * 0.006)),
      0px 0px calc(var(--diffusion) * 1.4px)
        rgba(255, 255, 255, calc(var(--intensity) * 0.004)),
      inset calc(var(--bevel) * -1) 0 var(--edge-blur)
        hsla(100, 0%, calc((var(--cos) + 1) * 50%), var(--edge-opacity)),
      inset 0 var(--bevel) var(--edge-blur)
        hsla(100, 0%, calc((-1 * var(--sin) + 1) * 50%), var(--edge-opacity)),
      inset var(--bevel) 0 var(--edge-blur)
        hsla(100, 0%, calc((-1 * var(--cos) + 1) * 50%), var(--edge-opacity)),
      inset 0 calc(var(--bevel) * -1) var(--edge-blur)
        hsla(100, 0%, calc((var(--sin) + 1) * 50%), var(--edge-opacity));
    background-blend-mode: soft-light;
  }
</style>
