---
import { type CollectionEntry } from "astro:content";
import { type MarkdownHeading } from "astro";

import Layout from "./Layout.astro";
import TableOfContents from "@/components/pages/blog/TableOfContents.astro";

interface Props {
  frontmatter: CollectionEntry<"posts">["data"];
  headings: MarkdownHeading[];
  tags?: CollectionEntry<"tags">[];
  readingTime?: string;
  lastModified?: string;
}

const { frontmatter, headings, tags, readingTime, lastModified } = Astro.props;
---

<Layout title={`${frontmatter.title} - `}>
  <Fragment slot="head">
    <slot name="head" />
  </Fragment>
  <h1 transition:name={`blog-${frontmatter.title}-title`}>
    {frontmatter.title}
  </h1>

  <p
    class="mb-2 text-center text-sm"
    transition:name={`blog-${frontmatter.title}-date`}
  >
    {
      lastModified
        ? `Last updated ${new Date(lastModified).toLocaleDateString("en-NZ", {
            year: "numeric",
            month: "long",
            day: "numeric",
          })}`
        : `${new Date(frontmatter.date).toLocaleDateString("en-NZ", {
            year: "numeric",
            month: "long",
            day: "numeric",
          })}`
    }
  </p>

  <div class="mb-4 flex items-center justify-center gap-1.5">
    {
      tags &&
        tags.map(({ slug, data: tag }) => (
          <a href={`/tags/${slug}`}>
            <span class="rounded-3xl bg-slate-800 px-2 py-1 text-xs text-white">
              {tag.name}
            </span>
          </a>
        ))
    }
  </div>
  <p
    class="text-center text-sm text-slate-500 dark:text-slate-300"
    transition:name={`blog-${frontmatter.title}-reading`}
  >
    {readingTime}
  </p>

  <div class="mt-4">
    <div class="flex flex-col lg:flex-row lg:items-start">
      <article class="post prose dark:prose-invert sm:max-w-prose">
        <slot />
      </article>

      <TableOfContents headings={headings} />
    </div>
  </div>
</Layout>
